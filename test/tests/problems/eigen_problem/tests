[Tests]
   design = "Eigenvalue.md"
   issues = "#7398"

  [./test]
    type = 'CSVDiff'
    input = 'ipm.i'
    csvdiff = 'ipm_out_eigenvalues_0001.csv'
    slepc = true
    requirement = "Eigenvalue system should support standard eigenvalue problems"
  [../]

  [./gipm_test]
    type = 'CSVDiff'
    input = 'gipm.i'
    csvdiff = 'gipm_out_eigenvalues_0001.csv'
    slepc = true
    requirement = "Eigenvalue system should support generalized eigenvalue problems"
  [../]

  [./gipm_ibc]
    type = 'CSVDiff'
    input = 'gipm_ibc.i'
    csvdiff = 'gipm_ibc_out_eigenvalues_0001.csv'
    slepc = true
    requirement = "Eigenvalue system should support IntegratedBC"
  [../]

  [./wrong_dirichlet_value_eigen]
    type = 'RunException'
    input = 'gipm.i'
    cli_args = 'BCs/homogeneous/value=1'
    expect_err = "Can.t set an inhomogeneous Dirichlet boundary condition for eigenvalue problems."
    slepc = true
    requirement = "Eigenvalue system should not allow users to use inhomogeneous nodal boundary conditions"
  [../]

  [./wrong_NodalBC_type_eigen]
    type = 'RunException'
    input = 'gipm.i'
    cli_args = 'BCs/homogeneous/type=FunctionDirichletBC BCs/homogeneous/function=0'
    expect_err = "Invalid NodalBC for eigenvalue problems, please use homogeneous Dirichlet."
    slepc = true
    requirement = "Eigenvalue system should use homogeneous boundary conditions only"
  [../]

  [./no_slepc]
    type = 'RunException'
    input = 'gipm.i'
    cli_args = 'Executioner/solve_type=NEWTON'
    expect_err = "Need to install SLEPc to solve eigenvalue problems, please reconfigure libMesh."
    slepc = false
    requirement = "Eigenvalue system requires SLEPc installed"
  [../]

  [./nonlinear_power]
    type = 'CSVDiff'
    input = 'ne.i'
    cli_args = 'Executioner/solve_type=NONLINEAR_POWER Executioner/matrix_free=true Outputs/file_base=nonlinear_power'
    csvdiff = 'nonlinear_power_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to solve a nonlinear eigenvalue problem"
  [../]

  [./monolith_newton]
    type = 'CSVDiff'
    input = 'ne.i'
    cli_args = 'Executioner/solve_type=NEWTON Executioner/matrix_free=true Outputs/file_base=monolith_newton'
    csvdiff = 'monolith_newton_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to solve a nonlinear eigenvalue problem using Newton"
  [../]

  [./ne_deficient]
    type = 'CSVDiff'
    input = 'ne_deficient_b.i'
    csvdiff = 'ne_deficient_b_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to solve a deficient eigenvalue problem"
  [../]

  [./nonlinear_laplace]
    type = 'CSVDiff'
    input = 'ane.i'
    csvdiff = 'ane_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to compute a nonlinear eigenvalue problem"
  [../]

  [./coupled_system]
    type = 'CSVDiff'
    input = 'ne_coupled.i'
    csvdiff = 'ne_coupled_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to compute a coupled nonlinear eigenvalue problem"
  [../]

  [./eigen_scalar_kernel]
    type = 'CSVDiff'
    input = 'scalar.i'
    csvdiff = 'scalar_out_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to handle scalar kernels"
  [../]

  [./dg_krylovschur]
    type = 'CSVDiff'
    input = 'dg_krylovschur.i'
    csvdiff = 'dg_krylovschur_out_eigenvalues_0001.csv'
    slepc_version = '>=3.8.0'
    requirement = "Eigenvalue system should be able to handle DG kernels"
  []

  [./ne_coupled_picard_eigen_master]
    type = 'CSVDiff'
    input = 'ne_coupled_picard.i'
    csvdiff = 'ne_coupled_picard_out_eigenvalues_0001.csv'
    slepc_version = '>=3.12.0'
    requirement = "Eigenvalue system shall support Picard iteration using eigenvalue executioner as a master"
  []

  [./ne_coupled_picard_eigen_sub]
    type = 'CSVDiff'
    input = 'ne_coupled_picard_subT.i'
    csvdiff = 'ne_coupled_picard_subT_out_sub0_eigenvalues_0001.csv'
    slepc_version = '>=3.12.0'
    requirement = "Eigenvalue system shall support Picard iteration using eigenvalue executioner as a sub app"
  []

  [./scaled_eigenvector]
    type = 'Exodiff'
    input = 'ne_coupled_scaled.i'
    exodiff = 'ne_coupled_scaled_out.e'
    slepc_version = '>=3.8.0'
    issues = '#14500'
    requirement = "Eigenvalue system should be able scale eigenvector such that postprocessor is a certain value"
  []

[]
